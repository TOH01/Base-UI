name: Build and Test (MSYS2 / MinGW)

on:
  push:
  pull_request:

jobs:
  build-test:
    runs-on: windows-latest

    steps:
      # --- Checkout ---
      - uses: actions/checkout@v4

      # --- MSYS2 Setup with caching ---
      - name: Set up MSYS2 with MinGW64
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make
            mingw-w64-x86_64-gdb
          cache: true

      # --- Verify MSYS2 installation ---
      - name: Verify MSYS2 packages
        shell: msys2 {0}
        run: pacman -Q mingw-w64-x86_64-gcc mingw-w64-x86_64-make mingw-w64-x86_64-gdb

      # --- Add MinGW64 to Windows PATH ---
      - name: Add MinGW64 to PATH
        shell: cmd
        run: set "PATH=%PATH%;C:\msys64\mingw64\bin"

      # --- Debug Windows environment ---
      - name: Debug environment
        shell: cmd
        run: |
          echo PATH=%PATH%
          where gcc
          where mingw32-make
          mingw32-make --version
          gcc --version

      # --- Ensure artifacts and build directories exist ---
      - name: Prepare directories
        shell: cmd
        run: |
          if not exist artifacts mkdir artifacts
          if not exist artifacts\builds mkdir artifacts\builds
          if not exist artifacts\logs mkdir artifacts\logs
          if not exist releases mkdir releases
          if not exist build mkdir build
          if not exist build\main mkdir build\main
          if not exist build\main\components mkdir build\main\components
          if not exist build\main\core mkdir build\main\core
          if not exist build\main\utils mkdir build\main\utils
          if not exist build\main\demo mkdir build\main\demo

      # --- Debug Makefile variables ---
      - name: Debug Makefile variables
        shell: cmd
        run: |
          mingw32-make SHELL=cmd.exe DEMO=narcia MODE=release -n
          mingw32-make SHELL=cmd.exe DEMO=calendar MODE=release -n

      # --- Unit Test ---
      - name: Clean before unit test
        shell: cmd
        run: mingw32-make SHELL=cmd.exe clean --debug

      - name: Build and run unit tests
        shell: cmd
        run: |
          mingw32-make SHELL=cmd.exe test > artifacts\logs\test_output.txt 2>&1
          type artifacts\logs\test_output.txt
          dir build

      # --- Extract and Display Test Results ---
      - name: Parse and display test results
        if: always()
        shell: pwsh
        run: |
          $testOutput = Get-Content artifacts\logs\test_output.txt -Raw
          
          # Extract test summary line (e.g., "16 tests, 35 assertions, 0 failures")
          if ($testOutput -match '(\d+)\s+tests?,\s+(\d+)\s+assertions?,\s+(\d+)\s+failures?') {
            $tests = $matches[1]
            $assertions = $matches[2]
            $failures = $matches[3]
            
            Write-Host "================================================"
            Write-Host "TEST RESULTS SUMMARY"
            Write-Host "================================================"
            Write-Host "Tests:      $tests"
            Write-Host "Assertions: $assertions"
            Write-Host "Failures:   $failures"
            Write-Host "================================================"
            
            # Create a summary file
            $summary = @"
          # Test Results Summary
          
          - **Tests:** $tests
          - **Assertions:** $assertions
          - **Failures:** $failures
          - **Status:** $(if ($failures -eq 0) { '✅ PASSED' } else { '❌ FAILED' })
          "@
            
            $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
            
            # Fail the step if there are failures
            if ($failures -gt 0) {
              Write-Host "::error::Tests failed with $failures failure(s)"
              exit 1
            }
          } else {
            Write-Host "::warning::Could not parse test results from output"
            Write-Host "Full output:"
            Write-Host $testOutput
          }

      # --- Narcia Build ---
      - name: Clean before Narcia build
        shell: cmd
        run: mingw32-make SHELL=cmd.exe clean --debug

      - name: Build Narcia (Release)
        shell: cmd
        run: |
          mingw32-make SHELL=cmd.exe DEMO=narcia BUILD_TYPE=release
          dir build
          if exist build\my_program.exe (copy build\my_program.exe artifacts\builds\narcia.exe) else (echo ERROR: my_program.exe not found in build directory && exit /b 1)

      # --- Create Narcia Release Package ---
      - name: Package Narcia release
        if: success()
        shell: pwsh
        run: |
          Compress-Archive -Path artifacts\builds\narcia.exe -DestinationPath releases\narcia-release.zip
          Write-Host "Created releases\narcia-release.zip"

      # --- Calendar Build ---
      - name: Clean before Calendar build
        shell: cmd
        run: mingw32-make SHELL=cmd.exe clean --debug

      - name: Build Calendar (Release)
        shell: cmd
        run: |
          mingw32-make SHELL=cmd.exe DEMO=calendar BUILD_TYPE=release
          dir build
          if exist build\my_program.exe (copy build\my_program.exe artifacts\builds\calendar.exe) else (echo ERROR: my_program.exe not found in build directory && exit /b 1)

      # --- Create Calendar Release Package ---
      - name: Package Calendar release
        if: success()
        shell: pwsh
        run: |
          Compress-Archive -Path artifacts\builds\calendar.exe -DestinationPath releases\calendar-release.zip
          Write-Host "Created releases\calendar-release.zip"

      # --- Create Combined Release Package ---
      - name: Package all releases
        if: success()
        shell: pwsh
        run: |
          Compress-Archive -Path artifacts\builds\*.exe -DestinationPath releases\all-releases.zip
          Write-Host "Created releases\all-releases.zip"

      # --- Upload Test Results ---
      - name: Upload test log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: artifacts/logs/test_output.txt
          retention-days: 7

      # --- Upload Individual Release Packages ---
      - name: Upload Narcia release
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: narcia-release
          path: releases/narcia-release.zip
          retention-days: 30

      - name: Upload Calendar release
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: calendar-release
          path: releases/calendar-release.zip
          retention-days: 30

      - name: Upload all releases
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: all-releases
          path: releases/all-releases.zip
          retention-days: 30
      
       # --- Upload Individual Release Packages ---
      - name: Upload Narcia release
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: narcia-release
          path: releases/narcia-release.zip
          retention-days: 30

      - name: Upload Calendar release
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: calendar-release
          path: releases/calendar-release.zip
          retention-days: 30

      - name: Upload all releases
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: all-releases
          path: releases/all-releases.zip
          retention-days: 30

      # --- Create GitHub Release (on tags) ---
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            releases/narcia-release.zip
            releases/calendar-release.zip
            releases/all-releases.zip
          body: |
            ## Release Notes
            
            ### Downloads
            - **Narcia Demo**: `narcia-release.zip`
            - **Calendar Demo**: `calendar-release.zip`
            - **All Demos**: `all-releases.zip`
            
            ### Build Information
            - Compiler: MinGW GCC (MSYS2)
            - Build Type: Release
            - Platform: Windows x64
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Update Test Badge ---
      - name: Create test badge
        if: always() && github.ref == 'refs/heads/main'
        shell: pwsh
        run: |
          $testOutput = Get-Content artifacts\logs\test_output.txt -Raw
          
          if ($testOutput -match '(\d+)\s+tests?,\s+(\d+)\s+assertions?,\s+(\d+)\s+failures?') {
            $tests = $matches[1]
            $assertions = $matches[2]
            $failures = $matches[3]
            
            $status = if ($failures -eq 0) { "passing" } else { "failing" }
            $color = if ($failures -eq 0) { "brightgreen" } else { "red" }
            
            $badgeData = @{
              schemaVersion = 1
              label = "tests"
              message = "$tests tests | $assertions assertions | $failures failures"
              color = $color
            }
            
            $badgeJson = $badgeData | ConvertTo-Json -Compress
            $badgeJson | Out-File -FilePath badges\test-results.json -Encoding utf8
            
            Write-Host "Created badge data: $badgeJson"
          }

      - name: Commit badge data
        if: always() && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add badges/test-results.json || true
          git diff --staged --quiet || git commit -m "Update test results badge [skip ci]"
          git push || true